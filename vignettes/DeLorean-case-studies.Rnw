%\VignetteIndexEntry{DeLorean-intro}
%\VignetteEngine{knitr::knitr}
\documentclass{article}
\usepackage{url, graphicx, amsmath}
\usepackage{tabularx}
\usepackage{tabulary}
\usepackage{color}
\usepackage[cm]{fullpage}
\usepackage[usenames,dvipsnames]{xcolor}
%\usepackage[authoryear]{natbib}
%\makeatletter
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
% \VignetteIndexEntry{DeLorean case studies}
%\makeatother
\newcommand{\todo}[1]{TODO: {\color{red} #1}}
\newcommand{\dl}{\texttt{DeLorean}}
\begin{document}
\title{DeLorean case studies}
\author{John Reid}
\maketitle

<<config, echo=FALSE, message=FALSE>>=
library(knitr)
opts_chunk$set(
    fig.path='figures/McDavid-',
    stop_on_error = TRUE,
    fig.width=12.5,
    fig.height=8)

@

<<build, echo=FALSE, eval=FALSE>>=
library(devtools)
load_all('..')
knit2pdf('DeLorean-case-studies.Rnw')

@

<<loadLibs, echo=FALSE, message=FALSE>>=
# suppressMessages(loadfonts())
library(DeLorean)

@

<<themes, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE>>=
mrc.colors <- c(
    rgb(138, 121, 103, maxColorValue=255),
    rgb(217, 165, 41 , maxColorValue=255),
    rgb(153, 152, 40 , maxColorValue=255),
    rgb(117, 139, 121, maxColorValue=255),
    rgb(33 , 103, 126, maxColorValue=255),
    rgb(208, 114, 50 , maxColorValue=255),
    rgb(106, 59 , 119, maxColorValue=255),
    rgb(130, 47 , 90 , maxColorValue=255)
)
font.family <- "Verdana"
font.theme <- theme_update(text=element_text(family=font.family))
theme_set(font.theme)

@



\section*{McDavid et al. cell cycle experiments}

McDavid et al.~\cite{mcdavid_modeling_2014} assayed actively cycling single
cells in order to examine the confounding effect of the cell cycle on
single cell expression analyses. They measured the expression of 333 genes
in 930 cells across three cell cycle phases and three cell lines.


\subsection*{Data}

McDavid et al.'s data is available in the \dl\ R package.
<<loadLib>>=
library(DeLorean)
data(McDavidDeLorean)
@
This will load a 253 by 930 matrix containing the expression measurements. Not
all 333 genes are represented as several are rarely expressed.
<<exprDim>>=
dim(mcdavid.expr)
@
and two data frames of meta data for the genes and cells.
<<meta>>=
summary(mcdavid.gene.meta)
summary(mcdavid.cell.meta)
@


Examine data for empirical Bayes estimation of hyperparameters.
<<empiricalBayes>>=
dl <- de.lorean(
    mcdavid.expr,
    mcdavid.gene.meta,
    mcdavid.cell.meta)
dl <- estimate.hyper(
    dl,
    sigma.tau=.5,
    delta=.5)
# knit.report(dl, "hyper-parameters")

@


Choose a few cells from the PC3 cell line.
<<filterCells>>=
set.seed(1)
cells.PC3 <- sample(filter(mcdavid.cell.meta, "PC3" == cellline)$cell, 37)
cell.filter <- function(cells) cells %in% cells.PC3
dl <- filter.cells(dl, cell.filter)

@


Choose a handful of genes with low $p$-values from the McDavid et al.
differential expression test.
<<filterGenes>>=
genes.for.stan <- sample((filter(mcdavid.gene.meta,
                                 pvalue > 5)
                          %>% arrange(cbRank))$gene,
                          73)
gene.filter <- function(genes) genes %in% genes.for.stan
dl <- filter.genes(dl, gene.filter)

@


Define and compile the model, find the best initialisation, and fit the model.
<<model>>=
dl <- format.for.stan(dl, period=3)
dl <- compile.model.simple(dl)
dl <- find.best.tau(dl)
dl <- fit.model(dl, num.cores=3)

@


Examine convergence.
<<examConv>>=
dl <- examine.convergence(dl)
dl$rhat.sorted

@


Examine posterior.
<<posterior>>=
dl <- process.posterior(dl)
# A colour scale for the observed time
scale.obstime <- scale_colour_manual(name="Observed\ntime",
                                    values=mrc.colors.3)
highest.ranked.genes <- (
    dl$gene.map
    %>% left_join(mcdavid.gene.meta)
    %>% arrange(cbRank)
    %>% head(16))$gene

#
# Analyse gene noise levels
#
dl <- analyse.noise.levels(dl)
# knit.report(dl, "posterior")

#
# Plot predictions from best sample
#
dl <- make.predictions(dl)
gp <- plot(dl, type="best.predictions")
print(gp)

#
# Investigate mixing over tau
#
with(dl, {
    (ggplot(samples.l$tau,
            # %>% filter(c %in% c(1,3,5,9,10)),
            # %>% group_by(iter)
            # %>% summarise(cell.order=order(c)),
            aes(x=iter, y=tau, color=factor(c)))
        + geom_line(alpha=.3)
    )
})

@


<<oldCode, eval=FALSE, include=FALSE>>=
# Plot cell size-factor against tau
cell.tau <- (samples.all
    %>% group_by(cell)
    %>% summarise(mean.tau=mean(modulo.period(tau)))
    %>% arrange(mean.tau)
)
(ggplot(samples.all,
        aes(x=factor(cell, levels=cell.tau$cell), y=S))
    + geom_boxplot()
)

# Plot cbPeaktime against best sample max predicted mean time
peak.vs.max <- (best.mean
        %>% group_by(gene)
        %>% summarise(predicted.peak=tau[which.max(predictedmean)],
                      cbPeaktime=cbPeaktime[1]))
(ggplot(peak.vs.max, aes(x=cbPeaktime, y=predicted.peak))
    + geom_point()
)
with(peak.vs.max, { cor(cbPeaktime, predicted.peak, use="complete.obs") })

# Plot cbPeaktime against mean sample max predicted mean time
(ggplot(predicted.mean
        %>% group_by(gene)
        %>% summarise(predicted.peak=tau[which.max(predictedmean)],
                      cbPeaktime=cbPeaktime[1]),
        aes(x=cbPeaktime, y=predicted.peak))
    + geom_point()
)

(ggplot(samples.l$tau,
        aes(x=iter, y=tau.offset, color=factor(c)))
    + geom_line(alpha=.3)
)

(ggplot(samples.l$tau,
        aes(x=iter, y=tau, color=factor(c)))
    + geom_line(alpha=.3)
)

# Line-plot positive expression for best sample over tau
(ggplot(sample.best %>% filter(et > 0, g == 23),
        aes(x=tau-floor(tau/3)*3,
            y=log(et) - S - phi,
            group=factor(g),
            color=is.na(cbRank)))
    + geom_point(alpha=.7)
    + geom_smooth(method="loess", se=FALSE, span=.7, alpha=.1)
)

# Line-plot positive expression for best sample over time
(ggplot(et.l %>% filter(iter == best.sample, et > 0),
        aes(x=obstime, y=log(et), color=factor(g)))
    + geom_point()
    + geom_smooth(method="loess", se=FALSE, span=1.5)
)

# Line-plot positive expression for average over samples
(ggplot(samples.all
        %>% filter(et > 0)
        %>% group_by(g, c)
        %>% summarise(expr=mean(expr),
                      tau=mean(tau),
                      cbRank=cbRank[1]),
        aes(x=tau, y=expr, group=factor(g), color=is.na(cbRank)))
    + geom_point(alpha=.1)
    + geom_smooth(method="loess", se=FALSE, span=1.5)
)

g.by.ll <- (samples.l$ll
            %>% group_by(g)
            %>% summarise(ll.median=median(ll))
            %>% arrange(ll.median))
(ggplot(samples.l$ll,
        aes(x=factor(g, levels=g.by.ll$g), y=ll))
    + geom_boxplot(alpha=.1)
)
mean(samples.l$ll$ll)

(ggplot(samples.l$tau,
        # aes(x=factor(c, levels=order(expr.f.stan$time)),
        aes(x=factor(c, levels=order(la$tau[best.sample,])),
            y=tau,
            fill=factor(expr.f.stan$time[c])))
    + geom_boxplot(alpha=.1)
)

(ggplot(samples.l$alpha,
        aes(x=iter, y=alpha, color=factor(c)))
    + geom_line()
)

(ggplot(samples.l$S,
        aes(x=iter, y=S, color=factor(c)))
    + geom_line()
)

best.sample <- which.max(samples.l$lp__$lp__)
best.sample
qplot(x=la$lp__, y=rowMeans(la$ll))

expr.f.et <- melt(unname(expr.f.stan$et), varnames=c("g","c"), value.name="et")
(ggplot(expr.f.et
        %>% filter(g < 11, et > 0)
        %>% left_join(samples.l$tau)
        %>% filter(iter == best.sample),
        aes(x=tau, y=et, color=factor(g)))
    + geom_line()
)

(ggplot(samples.l$ll
        %>% group_by(q)
        %>% summarise(mean.ll=mean(ll)),
        aes(x=mean.ll))
    + geom_density()
    + geom_rug()
)

(ggplot(samples.l$alpha,
        aes(x=alpha, color=factor(c)))
    + geom_density()
    + geom_rug()
)

cell.factors <- samples.l$alpha %>% left_join(samples.l$S)
(ggplot(cell.factors,
        aes(x=alpha, y=S, color=factor(c)))
    + geom_point(alpha=.3)
)

(ggplot(samples.l$tau,
        aes(x=factor(c), y=tau.offset, fill=factor(obstime)))
    + geom_boxplot()
)

# Plot mean predicted expression
predicted.mean <- (samples.l$predictedmean
              %>% group_by(g, t)
              %>% summarise(predictedmean=mean(predictedmean))
              %>% mutate(tau=modulo.period(
                                (t-1) * period / (expr.f.stan$numtest-1)))
              %>% left_join(gene.map))
(ggplot(predicted.mean %>% filter(gene %in% highest.ranked.genes),
        aes(x=tau, y=predictedmean))
    + geom_line(alpha=.3)
    + geom_point(aes(x=modulo.period(tau), y=expr - phi - S),
                 data=sample.best %>% filter(gene %in% highest.ranked.genes,
                                             expr > stan.minexpr))
    + facet_wrap(~ gene)
)

@


R version and packages used:
<<Rversion>>=
sessionInfo()
@


% \nocite{*}
\bibliographystyle{plain}
\bibliography{DeLorean}

\end{document}
